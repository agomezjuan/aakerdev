name: Issue Management

on:
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  pull-requests: write

jobs:
  issue-labeler:
    name: Auto Label Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'

    steps:
      - name: Add priority labels
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';

            // Auto-assign based on title keywords
            const title = issue.title.toLowerCase();
            const labels = [];

            // Priority based on keywords
            if (title.includes('critical') || title.includes('urgent')) {
              labels.push('priority: high');
            } else if (title.includes('important')) {
              labels.push('priority: medium');
            } else {
              labels.push('priority: low');
            }

            // Type detection from title
            if (title.includes('bug') || title.includes('error') || title.includes('issue')) {
              labels.push('type: bug');
            } else if (title.includes('feature') || title.includes('enhancement')) {
              labels.push('type: enhancement');
            } else if (title.includes('docs') || title.includes('documentation')) {
              labels.push('type: documentation');
            }

            // Area detection
            if (title.includes('ui') || title.includes('design') || title.includes('style')) {
              labels.push('area: frontend');
            } else if (title.includes('test') || title.includes('testing')) {
              labels.push('area: testing');
            } else if (title.includes('ci') || title.includes('deploy') || title.includes('build')) {
              labels.push('area: ci-cd');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

  pr-to-issue-link:
    name: Link PR to Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'

    steps:
      - name: Link PRs to Issues
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Extract issue numbers from PR body
            const issueMatches = body.match(/(fixes|closes|resolves)\s+#(\d+)/gi);

            if (issueMatches) {
              for (const match of issueMatches) {
                const issueNumber = match.match(/#(\d+)/)[1];
                
                // Add comment to issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: `ðŸ”— Linked to PR #${pr.number}`
                });
                
                // Add label to PR
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['linked-to-issue']
                });
              }
            }

  close-linked-issues:
    name: Close Linked Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged

    steps:
      - name: Close Linked Issues
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Extract issue numbers that should be closed
            const issueMatches = body.match(/(fixes|closes|resolves)\s+#(\d+)/gi);

            if (issueMatches) {
              for (const match of issueMatches) {
                const issueNumber = match.match(/#(\d+)/)[1];
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  state: 'closed'
                });
                
                // Add comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNumber),
                  body: `âœ… Resolved by PR #${pr.number}`
                });
              }
            }
